CREATE TABLE employee(
	eNo NUMBER,
	eName VARCHAR(20),
	salary NUMBER(5),
	commission NUMBER(5),
	hireDate date
);

INSERT INTO employee VALUES (101, 'Anjana', 15000, 1230, '12-jan-2015');
INSERT INTO employee VALUES (102, 'Fabian', 23000, 1231, '3-march-2013');
INSERT INTO employee VALUES (103, 'Crystal', 33000, 1232, '12-may-2014');
INSERT INTO employee VALUES (104, 'Dean', 61000, 1233, '21-june-2015');
INSERT INTO employee VALUES (105, 'Donna', 47000, 1234, '20-aug-2015');
INSERT INTO employee VALUES (106, 'Sam', 52000, 1235, '16-nov-2017');
INSERT INTO employee VALUES (107, 'Carly', 25000, 1236, '15-dec-2011');
INSERT INTO employee VALUES (108, 'Freddie', 41000, 1237, '12-feb-2016');
INSERT INTO employee VALUES (109, 'Mike', 33000, 1238, '11-feb-2012');
INSERT INTO employee VALUES (110, 'Monica', 18000, 1239, '11-feb-2015');
INSERT INTO employee VALUES (111, 'Chandler', 22000, NULL, '12-feb-2015');
INSERT INTO employee VALUES (112, 'Ross', 28000, NULL, '13-feb-2015');
INSERT INTO employee VALUES (113, 'Rachel', 39000, NULL, '14-feb-2015');


SELECT eNo, eName, salary, nvl(commission,1000) new_commission FROM employee ORDER BY new_commission DESC;

ALTER TABLE employee ADD job VARCHAR(25);
UPDATE employee SET job = 'Accountant' WHERE eNo = 101; 
UPDATE employee SET job = 'Manager' WHERE eNo = 102; 
UPDATE employee SET job = 'Accountant' WHERE eNo = 103; 
UPDATE employee SET job = 'Accountant' WHERE eNo = 104; 
UPDATE employee SET job = 'Designer' WHERE eNo = 105; 
UPDATE employee SET job = 'Programmer' WHERE eNo = 106; 
UPDATE employee SET job = 'Programmer' WHERE eNo = 107; 
UPDATE employee SET job = 'Designer' WHERE eNo = 108; 
UPDATE employee SET job = 'Accountant' WHERE eNo = 109;
UPDATE employee SET job = 'Designer' WHERE eNo = 110; 
UPDATE employee SET job = 'Programmer' WHERE eNo = 111; 
UPDATE employee SET job = 'Accountant' WHERE eNo = 112; 
UPDATE employee SET job = 'Designer' WHERE eNo = 113; 
 


SELECT eNo, eName, deptNo, salary 
FROM (
	SELECT eNo, eName, deptNo, salary, rank() over (
		PARTITION BY deptNo ORDER BY salary
	)LOWER FROM employee
) WHERE LOWER = 2;





SELECT eNo, eName, salary, deptNo, SUM(salary) 
OVER(PARTITION BY deptNo ORDER BY deptNo ROWS 2 PRECEDING) AS Total 
FROM employee
ORDER BY deptNo;



SELECT eNo, eName, salary, deptNo, SUM(salary) 
OVER (
	PARTITION BY deptNo
	ORDER BY deptNo 
	ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING
) AS Total
FROM employee
ORDER BY deptNo;



SELECT eNo, eName, salary, deptNo, SUM(salary)
OVER(
	PARTITION BY deptNo
	ORDER BY deptNo
	ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
) AS Total
FROM employee
ORDER BY deptNo;




SELECT deptNo, eName, salary, MIN(hireDate)
KEEP (
	dense_rank FIRST 
	ORDER BY hireDate
)
OVER(
	PARTITION BY deptNo
)
FROM employee;






